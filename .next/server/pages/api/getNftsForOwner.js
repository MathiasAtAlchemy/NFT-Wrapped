"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/getNftsForOwner";
exports.ids = ["pages/api/getNftsForOwner"];
exports.modules = {

/***/ "alchemy-sdk":
/*!******************************!*\
  !*** external "alchemy-sdk" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("alchemy-sdk");

/***/ }),

/***/ "(api)/./pages/api/getNftsForOwner.js":
/*!**************************************!*\
  !*** ./pages/api/getNftsForOwner.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alchemy-sdk */ \"alchemy-sdk\");\n/* harmony import */ var alchemy_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function handler(req, res) {\n    const { address , pageSize , chain , excludeFilter , pageKey  } = JSON.parse(req.body);\n    if (req.method !== \"POST\") {\n        res.status(405).send({\n            message: \"Only POST requests allowed\"\n        });\n        return;\n    }\n    const settings = {\n        apiKey: process.env.ALCHEMY_API_KEY,\n        network: alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.Network[chain]\n    };\n    const alchemy = new alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.Alchemy(settings);\n    try {\n        const nfts = await alchemy.nft.getNftsForOwner(address, {\n            pageSize: pageSize ? pageSize : 100,\n            excludeFilters: excludeFilter && [\n                alchemy_sdk__WEBPACK_IMPORTED_MODULE_0__.NftFilters.SPAM\n            ],\n            pageKey: pageKey ? pageKey : \"\"\n        });\n        const formattedNfts = nfts.ownedNfts.map((nft)=>{\n            const { contract , title , tokenType , tokenId , description , media  } = nft;\n            return {\n                contract: contract.address,\n                symbol: contract.symbol,\n                collectionName: contract.openSea?.collectionName,\n                media: media[0]?.gateway ? media[0]?.gateway : \"https://via.placeholder.com/500\",\n                verified: contract.openSea?.safelistRequestStatus,\n                tokenType,\n                tokenId,\n                title,\n                description,\n                format: media[0]?.format ? media[0]?.format : \"png\"\n            };\n        });\n        console.log(\"NFT COUNT\", formattedNfts.length);\n        if (excludeFilter) {\n            const filteredNfts = formattedNfts.filter((nft)=>nft.title.length && nft.description.length && nft.media);\n            if (filteredNfts) {\n                // console.log(\"test2\");\n                console.log(\"filteredNFTS: \", filteredNfts);\n                res.status(200).json({\n                    nfts: filteredNfts.length ? filteredNfts : null,\n                    pageKey: nfts.pageKey\n                });\n            }\n        } else {\n            res.status(200).json({\n                nfts: formattedNfts.length ? formattedNfts : null,\n                pageKey: nfts.pageKey\n            });\n        }\n    } catch (e) {\n        console.warn(e);\n        res.status(500).send({\n            message: \"something went wrong, check the log in your terminal\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ2V0TmZ0c0Zvck93bmVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRDtBQUU1QyxlQUFlRyxRQUFRQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTtJQUM5QyxNQUFNLEVBQUVDLFFBQU8sRUFBRUMsU0FBUSxFQUFFQyxNQUFLLEVBQUVDLGNBQWEsRUFBRUMsUUFBTyxFQUFFLEdBQUdDLEtBQUtDLEtBQUssQ0FDckVSLElBQUlTLElBQUk7SUFFVixJQUFJVCxJQUFJVSxNQUFNLEtBQUssUUFBUTtRQUN6QlQsSUFBSVUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxTQUFTO1FBQTZCO1FBQzdEO0lBQ0YsQ0FBQztJQUVELE1BQU1DLFdBQVc7UUFDZkMsUUFBUUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlO1FBQ25DQyxTQUFTdkIsZ0RBQU8sQ0FBQ1EsTUFBTTtJQUN6QjtJQUVBLE1BQU1nQixVQUFVLElBQUl2QixnREFBT0EsQ0FBQ2lCO0lBRTVCLElBQUk7UUFDRixNQUFNTyxPQUFPLE1BQU1ELFFBQVFFLEdBQUcsQ0FBQ0MsZUFBZSxDQUFDckIsU0FBUztZQUN0REMsVUFBVUEsV0FBV0EsV0FBVyxHQUFHO1lBQ25DcUIsZ0JBQWdCbkIsaUJBQWlCO2dCQUFDUCx3REFBZTthQUFDO1lBQ2xEUSxTQUFTQSxVQUFVQSxVQUFVLEVBQUU7UUFDakM7UUFFQSxNQUFNb0IsZ0JBQWdCTCxLQUFLTSxTQUFTLENBQUNDLEdBQUcsQ0FBQyxDQUFDTixNQUFRO1lBQ2hELE1BQU0sRUFBRU8sU0FBUSxFQUFFQyxNQUFLLEVBQUVDLFVBQVMsRUFBRUMsUUFBTyxFQUFFQyxZQUFXLEVBQUVDLE1BQUssRUFBRSxHQUFHWjtZQUNwRSxPQUFPO2dCQUNMTyxVQUFVQSxTQUFTM0IsT0FBTztnQkFDMUJpQyxRQUFRTixTQUFTTSxNQUFNO2dCQUN2QkMsZ0JBQWdCUCxTQUFTUSxPQUFPLEVBQUVEO2dCQUNsQ0YsT0FBT0EsS0FBSyxDQUFDLEVBQUUsRUFBRUksVUFDYkosS0FBSyxDQUFDLEVBQUUsRUFBRUksVUFDVixpQ0FBaUM7Z0JBQ3JDQyxVQUFVVixTQUFTUSxPQUFPLEVBQUVHO2dCQUM1QlQ7Z0JBQ0FDO2dCQUNBRjtnQkFDQUc7Z0JBQ0FRLFFBQVFQLEtBQUssQ0FBQyxFQUFFLEVBQUVPLFNBQVNQLEtBQUssQ0FBQyxFQUFFLEVBQUVPLFNBQVMsS0FBSztZQUNyRDtRQUNGO1FBQ0FDLFFBQVFDLEdBQUcsQ0FBQyxhQUFhakIsY0FBY2tCLE1BQU07UUFDN0MsSUFBSXZDLGVBQWU7WUFDakIsTUFBTXdDLGVBQWVuQixjQUFjb0IsTUFBTSxDQUN2QyxDQUFDeEIsTUFBUUEsSUFBSVEsS0FBSyxDQUFDYyxNQUFNLElBQUl0QixJQUFJVyxXQUFXLENBQUNXLE1BQU0sSUFBSXRCLElBQUlZLEtBQUs7WUFFbEUsSUFBSVcsY0FBYztnQkFDaEIsd0JBQXdCO2dCQUN4QkgsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQkU7Z0JBQzlCNUMsSUFBSVUsTUFBTSxDQUFDLEtBQUtvQyxJQUFJLENBQUM7b0JBQ25CMUIsTUFBTXdCLGFBQWFELE1BQU0sR0FBR0MsZUFBZSxJQUFJO29CQUMvQ3ZDLFNBQVNlLEtBQUtmLE9BQU87Z0JBQ3ZCO1lBQ0YsQ0FBQztRQUNILE9BQU87WUFDTEwsSUFBSVUsTUFBTSxDQUFDLEtBQUtvQyxJQUFJLENBQUM7Z0JBQ25CMUIsTUFBTUssY0FBY2tCLE1BQU0sR0FBR2xCLGdCQUFnQixJQUFJO2dCQUNqRHBCLFNBQVNlLEtBQUtmLE9BQU87WUFDdkI7UUFDRixDQUFDO0lBQ0gsRUFBRSxPQUFPMEMsR0FBRztRQUNWTixRQUFRTyxJQUFJLENBQUNEO1FBQ2IvQyxJQUFJVSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQ25CQyxTQUFTO1FBQ1g7SUFDRjtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ORlQgV3JhcHBlZC8uL3BhZ2VzL2FwaS9nZXROZnRzRm9yT3duZXIuanM/ZjQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXR3b3JrLCBBbGNoZW15LCBOZnRGaWx0ZXJzIH0gZnJvbSBcImFsY2hlbXktc2RrXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcbiAgY29uc3QgeyBhZGRyZXNzLCBwYWdlU2l6ZSwgY2hhaW4sIGV4Y2x1ZGVGaWx0ZXIsIHBhZ2VLZXkgfSA9IEpTT04ucGFyc2UoXG4gICAgcmVxLmJvZHlcbiAgKTtcbiAgaWYgKHJlcS5tZXRob2QgIT09IFwiUE9TVFwiKSB7XG4gICAgcmVzLnN0YXR1cyg0MDUpLnNlbmQoeyBtZXNzYWdlOiBcIk9ubHkgUE9TVCByZXF1ZXN0cyBhbGxvd2VkXCIgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2V0dGluZ3MgPSB7XG4gICAgYXBpS2V5OiBwcm9jZXNzLmVudi5BTENIRU1ZX0FQSV9LRVksXG4gICAgbmV0d29yazogTmV0d29ya1tjaGFpbl0sXG4gIH07XG5cbiAgY29uc3QgYWxjaGVteSA9IG5ldyBBbGNoZW15KHNldHRpbmdzKTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5mdHMgPSBhd2FpdCBhbGNoZW15Lm5mdC5nZXROZnRzRm9yT3duZXIoYWRkcmVzcywge1xuICAgICAgcGFnZVNpemU6IHBhZ2VTaXplID8gcGFnZVNpemUgOiAxMDAsXG4gICAgICBleGNsdWRlRmlsdGVyczogZXhjbHVkZUZpbHRlciAmJiBbTmZ0RmlsdGVycy5TUEFNXSxcbiAgICAgIHBhZ2VLZXk6IHBhZ2VLZXkgPyBwYWdlS2V5IDogXCJcIixcbiAgICB9KTtcblxuICAgIGNvbnN0IGZvcm1hdHRlZE5mdHMgPSBuZnRzLm93bmVkTmZ0cy5tYXAoKG5mdCkgPT4ge1xuICAgICAgY29uc3QgeyBjb250cmFjdCwgdGl0bGUsIHRva2VuVHlwZSwgdG9rZW5JZCwgZGVzY3JpcHRpb24sIG1lZGlhIH0gPSBuZnQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250cmFjdDogY29udHJhY3QuYWRkcmVzcyxcbiAgICAgICAgc3ltYm9sOiBjb250cmFjdC5zeW1ib2wsXG4gICAgICAgIGNvbGxlY3Rpb25OYW1lOiBjb250cmFjdC5vcGVuU2VhPy5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgbWVkaWE6IG1lZGlhWzBdPy5nYXRld2F5XG4gICAgICAgICAgPyBtZWRpYVswXT8uZ2F0ZXdheVxuICAgICAgICAgIDogXCJodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vNTAwXCIsXG4gICAgICAgIHZlcmlmaWVkOiBjb250cmFjdC5vcGVuU2VhPy5zYWZlbGlzdFJlcXVlc3RTdGF0dXMsXG4gICAgICAgIHRva2VuVHlwZSxcbiAgICAgICAgdG9rZW5JZCxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBmb3JtYXQ6IG1lZGlhWzBdPy5mb3JtYXQgPyBtZWRpYVswXT8uZm9ybWF0IDogXCJwbmdcIixcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coXCJORlQgQ09VTlRcIiwgZm9ybWF0dGVkTmZ0cy5sZW5ndGgpO1xuICAgIGlmIChleGNsdWRlRmlsdGVyKSB7XG4gICAgICBjb25zdCBmaWx0ZXJlZE5mdHMgPSBmb3JtYXR0ZWROZnRzLmZpbHRlcihcbiAgICAgICAgKG5mdCkgPT4gbmZ0LnRpdGxlLmxlbmd0aCAmJiBuZnQuZGVzY3JpcHRpb24ubGVuZ3RoICYmIG5mdC5tZWRpYVxuICAgICAgKTtcbiAgICAgIGlmIChmaWx0ZXJlZE5mdHMpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ0ZXN0MlwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJmaWx0ZXJlZE5GVFM6IFwiLCBmaWx0ZXJlZE5mdHMpO1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgbmZ0czogZmlsdGVyZWROZnRzLmxlbmd0aCA/IGZpbHRlcmVkTmZ0cyA6IG51bGwsXG4gICAgICAgICAgcGFnZUtleTogbmZ0cy5wYWdlS2V5LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICBuZnRzOiBmb3JtYXR0ZWROZnRzLmxlbmd0aCA/IGZvcm1hdHRlZE5mdHMgOiBudWxsLFxuICAgICAgICBwYWdlS2V5OiBuZnRzLnBhZ2VLZXksXG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoe1xuICAgICAgbWVzc2FnZTogXCJzb21ldGhpbmcgd2VudCB3cm9uZywgY2hlY2sgdGhlIGxvZyBpbiB5b3VyIHRlcm1pbmFsXCIsXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXR3b3JrIiwiQWxjaGVteSIsIk5mdEZpbHRlcnMiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiYWRkcmVzcyIsInBhZ2VTaXplIiwiY2hhaW4iLCJleGNsdWRlRmlsdGVyIiwicGFnZUtleSIsIkpTT04iLCJwYXJzZSIsImJvZHkiLCJtZXRob2QiLCJzdGF0dXMiLCJzZW5kIiwibWVzc2FnZSIsInNldHRpbmdzIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkFMQ0hFTVlfQVBJX0tFWSIsIm5ldHdvcmsiLCJhbGNoZW15IiwibmZ0cyIsIm5mdCIsImdldE5mdHNGb3JPd25lciIsImV4Y2x1ZGVGaWx0ZXJzIiwiU1BBTSIsImZvcm1hdHRlZE5mdHMiLCJvd25lZE5mdHMiLCJtYXAiLCJjb250cmFjdCIsInRpdGxlIiwidG9rZW5UeXBlIiwidG9rZW5JZCIsImRlc2NyaXB0aW9uIiwibWVkaWEiLCJzeW1ib2wiLCJjb2xsZWN0aW9uTmFtZSIsIm9wZW5TZWEiLCJnYXRld2F5IiwidmVyaWZpZWQiLCJzYWZlbGlzdFJlcXVlc3RTdGF0dXMiLCJmb3JtYXQiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiZmlsdGVyZWROZnRzIiwiZmlsdGVyIiwianNvbiIsImUiLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/getNftsForOwner.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/getNftsForOwner.js"));
module.exports = __webpack_exports__;

})();